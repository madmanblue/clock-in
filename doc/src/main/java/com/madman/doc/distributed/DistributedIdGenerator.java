package com.madman.doc.distributed;

/**
 * 分布式系统中id生成方案
 *
 *  UUID
 *
 *   优点：没有性能问题，实现方便，对于迁库不存在问题
 *   缺点：无序，可读性查，字符串存储性能差
 *   适合场景：生成token一类的
 *
 *  mysql主键
 *
 *   优点：实现简单，id数字化，满足数据库存储和查询性能，有一定的业务可读性
 *   缺点：存在单点问题，如果db挂了因业务受影响，单点压力太大
 *   适合场景：小规模的，访问量小的业务系统 无高并发场景
 *
 *   进阶：多数据库生成，通过设置步长实现
 *   优点：解决单点问题
 *   缺点：扩容难，无法满足高并发
 *
 *  snowflakes
 *
 *   优点：每秒生成上百万个id
 *   缺点：时钟依赖
 *   解决办法：等待或者使用环进行过去生成id的
 *  redis
 *
 *   redis 的 incr命令可以有序递增
 *   缺点：依赖网络，存在单点问题
 *
 *  leaf（美团）
 *
 *   每次获取一个区间的id存入对应的jvm中，为了防止多个应用抢同一个区的id，设置了双buffer方式
 *   缺点：抢依赖数据库
 */
public class DistributedIdGenerator {
}
